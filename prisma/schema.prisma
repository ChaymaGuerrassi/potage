generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  userType       UserType // New field to determine user type (Buyer or Seller)

  // Relationships
  sellerItems   SellerItem[]
  buyerRequests BuyerRequest[]
  accounts      Account[]
}

// Enum to define the User types
enum UserType {
  BUYER
  SELLER
}

model SellerItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageSrc    String
  createdAt   DateTime @default(now())
  category    String
  price       Int
  sellerId    String   @db.ObjectId
  isApproved  Boolean  @default(false) // For admin approval if required

  // New field to indicate the type of farm item (e.g., eggs, meat, vegetables, fruits, etc.)
  farmItemType FarmItemType

  seller        User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  // Relationship to BuyerRequest for the purchase requests on this item
  buyerRequests BuyerRequest[]
}

// Enum to define the types of farm items
enum FarmItemType {
  EGGS
  MEAT
  VEGETABLES
  FRUITS
  CHEESE
}

model BuyerRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  buyerId      String   @db.ObjectId
  sellerItemId String   @db.ObjectId
  quantity     Int
  message      String?
  createdAt    DateTime @default(now())

  buyer      User       @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  sellerItem SellerItem @relation(fields: [sellerItemId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
