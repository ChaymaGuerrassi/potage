generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  userType       UserType  @default(BUYER)

  // Relationships
  sellerItems   Announce[]
  buyerRequests BuyerRequest[]
  accounts      Account[]
}

// Enum to define the User types
enum UserType {
  BUYER
  SELLER
  BOTH
}

model Announce {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  locationValue String
  createdAt     DateTime     @default(now())
  category      FarmItemType
  price         Int
  itemWeight    Int
  itemUnit      Int
  sellerId      String       @db.ObjectId
  isApproved    Boolean?     @default(false)

  seller        User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  // Relationship to BuyerRequest for the purchase requests on this item
  buyerRequests BuyerRequest[]
}

// Enum to define the types of farm items
enum FarmItemType {
  EGGS
  MEAT
  VEGETABLES
  FLOWERS
  HERBS
  FRUITS
  HONEY
  DAIRY
  OTHER
}

// Enum to define the status of a purchase request
enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model BuyerRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  buyerId      String   @db.ObjectId
  sellerItemId String   @db.ObjectId
  message      String?
  createdAt    DateTime @default(now())
  status       RequestStatus @default(PENDING)

  buyer      User       @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  sellerItem Announce @relation(fields: [sellerItemId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
